# Variable 'task.MSBuild.status' was defined in the Variables tab
trigger:
  branches:
    include:
    - dev
resources:
  repositories:
  - repository: self
    type: git
    ref: dev
jobs:
- job: Job_2
  displayName: StartVM
  pool:
    vmImage: 'windows-2019'
  steps:
  - checkout: none
  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: ezKeys'
    inputs:
      ConnectedServiceName: a416236e-0672-4024-bca3-853beb235e5e
      KeyVaultName: ezKeys
      SecretsFilter: AzureFunctionKey
  - task: PowerShell@2
    displayName: StartVM
    continueOnError: true
    inputs:
      targetType: inline
      script: Invoke-RestMethod -Uri "https://ezengineci.azurewebsites.net/api/StartVM?code=$(AzureFunctionKey)&vmname=Windows10-1809"
- job: Job_1
  displayName: WindowsUWP-x64
  timeoutInMinutes: 180
  pool:
    name: Default
    demands:
    - Agent.OS -equals Windows_NT
  steps:
  - checkout: self
    submodules: true
    lfs: true
    clean: false
  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: ezKeys'
    inputs:
      ConnectedServiceName: a416236e-0672-4024-bca3-853beb235e5e
      KeyVaultName: ezKeys
      SecretsFilter: AzureBlobPW,ThirdPartyUWPx86
  # - task: PowerShell@2
  #   displayName: Download ThirdParty
  #   inputs:
  #     targetType: inline
  #     script: |
  #       if (!(Test-Path $(System.DefaultWorkingDirectory)\ThirdPartyUWPx86))
  #       {
  #         if (!(Test-Path $(System.DefaultWorkingDirectory)\ThirdPartyUWPx86))
  #         {
  #           & mkdir $(System.DefaultWorkingDirectory)\ThirdPartyUWPx86
  #         }
  #         if (!(Test-Path $(System.DefaultWorkingDirectory)\buildUWP))
  #         {
  #           & mkdir $(System.DefaultWorkingDirectory)\buildUWP
  #         }
  #         & compact /c /s /i /f $(System.DefaultWorkingDirectory)\ThirdPartyUWPx86\
  #         & compact /c /s /i /f $(System.DefaultWorkingDirectory)\buildUWP\
  #         & compact /c /s /i /f $(Build.ArtifactStagingDirectory)\
  #         $url7zip = "https://vstsagenttools.blob.core.windows.net/tools/7zip/1/7zip.zip"
  #         $output7zip = "./7zip.zip"
  #         $urlThirdParty = "$(ThirdPartyUWPx86)"
  #         $outputThirdParty = "$(System.DefaultWorkingDirectory)\ThirdParty.7z"
  #         $output = "$(System.DefaultWorkingDirectory)"
  #         wget $url7zip -OutFile $output7zip
  #         Expand-Archive -Path $output7zip -DestinationPath $output -Force
  #         # Start-BitsTransfer -Source $urlThirdParty -Destination $outputThirdParty
  #         wget $urlThirdParty -OutFile $outputThirdParty
  #         & "$output/7zip/7z.exe" x -p$(AzureBlobPW) $outputThirdParty
  #         & del $outputThirdParty
  #       }
  # - task: PowerShell@2
  #   displayName: Delete FMOD from ThirdParty
  #   inputs:
  #     targetType: inline
  #     script: |
  #       Remove-Item "$(System.DefaultWorkingDirectory)\ThirdPartyUWPx86\FMOD Studio API UWP" -Force  -Recurse -ErrorAction SilentlyContinue
  - task: PowerShell@2
    displayName: Delete old crash dumps
    inputs:
      targetType: inline
      script: |
        if ((Test-Path $(System.DefaultWorkingDirectory)\Output\Bin\WinVs2019Debug64))
        {
          Get-ChildItem $(System.DefaultWorkingDirectory)\Output\Bin\WinVs2019Debug64\*.dmp | foreach { Remove-Item -Force -Path $_.FullName }
        }
  # - task: CMake@1
  #   displayName: CMake x64
  #   inputs:
  #     cmakeArgs: -DCMAKE_PREFIX_PATH=$(System.DefaultWorkingDirectory)\ThirdPartyUWPx86\vs141x64 -DEZ_QT_DIR="$(System.DefaultWorkingDirectory)\ThirdPartyUWPx86\vs141x64" -DEZ_BUILD_PHYSX=0 -DEZ_BUILD_FMOD=0 -DEZ_BUILD_GAMES=0 -DEZ_COMPILE_ENGINE_AS_DLL=1 -DEZ_ENABLE_QT_SUPPORT=1 -DCMAKE_SYSTEM_VERSION=10.0.18362.0 -DCMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION=10.0.18362.0 -A "x64" -G "Visual Studio 16 2019" ../
  # - task: CMake@1
  #   displayName: CMake build RemoteTestHarness
  #   inputs:
  #     cmakeArgs: --build . --target RemoteTestHarness --config Debug
  # - task: DownloadBuildArtifacts@0
  #   displayName: 'Download Build Artifacts'
  #   inputs:
  #     buildType: specific
  #     project: '3be75850-43b5-4a0a-a9b3-9b1693a5beed'
  #     pipeline: 10
  #     buildVersionToDownload: latest
  #     allowPartiallySucceededBuilds: true
  #     specificBuildWithTriggering: true
  #     artifactName: AssetCache
  #     downloadPath: '$(System.DefaultWorkingDirectory)'
  #     extractTars: false
  # - task: PowerShell@2
  #   displayName: Move x64 build artifacts / download procdump
  #   inputs:
  #     targetType: inline
  #     script: |
  #       $RootDir = "$(System.DefaultWorkingDirectory)"
  #       $CacheDir = "$(System.DefaultWorkingDirectory)\AssetCache"
  #       $BinPath = ".\Output\Bin\WinVs2019Debug64\"
  #       ### x64 binaries
  #       if (Test-Path $BinPath)
  #       {
  #         # Remove-Item $BinPath* -Force -Recurse
  #       }
  #       else
  #       {
  #         New-Item -ItemType directory -Path $BinPath -Force
  #       }
  #       #Move-Item -Path .\drop\Bin\WinVs2019Debug64\* -Destination $BinPath
  #       #Remove-Item .\drop\ -Force -Recurse
  #       ### Asset Cache
  #       Copy-Item $CacheDir\* -Filter * -Destination $RootDir -Recurse -Force
  #       Remove-Item $CacheDir\ -Force -Recurse
  #       ### Procdump
  #       wget https://download.sysinternals.com/files/Procdump.zip -OutFile $BinPath\Procdump.zip
  #       Expand-Archive -Path $BinPath\Procdump.zip -DestinationPath $BinPath -Force
  - task: CMake@1
    displayName: CMake UWP
    inputs:
      cwd: buildUWP
      cmakeArgs: -DEZ_BUILD_FILTER="UwpProjects" -DEZ_COMPILE_ENGINE_AS_DLL=1 -DEZ_ENABLE_QT_SUPPORT=0 -DCMAKE_TOOLCHAIN_FILE="../Code/BuildSystem/CMake/toolchain-winstore.cmake" -A "x64" -G "Visual Studio 16 2019" ../
  - task: MSBuild@1
    displayName: Build solution buildUWP/ezVs2019.sln
    inputs:
      solution: buildUWP/ezVs2019.sln
      msbuildArchitecture: x64
      platform: x64
      configuration: Dev
      maximumCpuCount: true
  - task: PowerShell@2
    displayName: PowerShell Script
    inputs:
      targetType: inline
      filePath: Write-Host "##vso[task.setvariable variable=task.MSBuild.status]success"
      script: Write-Host "##vso[task.setvariable variable=task.MSBuild.status]success"
  # Unit tests are now deactivated on UWP
  # - task: CmdLine@2
  #   displayName: FoundationTest
  #   condition: eq(variables['task.MSBuild.status'], 'success')
  #   inputs:
  #     script: Output\Bin\WinVs2019Debug64\RemoteTestHarness.exe -w $(System.DefaultWorkingDirectory)\buildUWP -o $(Build.ArtifactStagingDirectory)\FoundationTest -p FoundationTest
  # - task: CmdLine@2
  #   displayName: CoreTest
  #   condition: eq(variables['task.MSBuild.status'], 'success')
  #   inputs:
  #     script: Output\Bin\WinVs2019Debug64\RemoteTestHarness.exe -w $(System.DefaultWorkingDirectory)\buildUWP -o $(Build.ArtifactStagingDirectory)\CoreTest -p CoreTest
  # - task: CmdLine@2
  #   displayName: RendererTest
  #   condition: eq(variables['task.MSBuild.status'], 'success')
  #   inputs:
  #     script: Output\Bin\WinVs2019Debug64\RemoteTestHarness.exe -w $(System.DefaultWorkingDirectory)\buildUWP -o $(Build.ArtifactStagingDirectory)\RendererTest -p RendererTest
  # - task: CmdLine@2
  #   displayName: GameEngineTest
  #   condition: eq(variables['task.MSBuild.status'], 'success')
  #   inputs:
  #     script: Output\Bin\WinVs2019Debug64\RemoteTestHarness.exe -w $(System.DefaultWorkingDirectory)\buildUWP -o $(Build.ArtifactStagingDirectory)\GameEngineTest -p GameEngineTest
  - task: CmdLine@2
    displayName: List files
    condition: always()
    inputs:
      script: |
        dir /s /o $(System.DefaultWorkingDirectory)\Output
  - task: CmdLine@2
    displayName: Copy Bin
    condition: eq(variables['task.MSBuild.status'], 'success')
    inputs:
      script: |
        REM rmdir /S /Q $(System.DefaultWorkingDirectory)\build
        REM rmdir /S /Q $(System.DefaultWorkingDirectory)\buildUWP
        xcopy Output\Bin\WinVs2019Debug64\*.dll $(Build.ArtifactStagingDirectory)\Bin\WinVs2019Debug64\ /C/D/Y
        xcopy Output\Bin\WinVs2019Debug64\*.pdb $(Build.ArtifactStagingDirectory)\Bin\WinVs2019Debug64\ /C/D/Y
        xcopy Output\Bin\WinVs2019Debug64\*.exe $(Build.ArtifactStagingDirectory)\Bin\WinVs2019Debug64\ /C/D/Y
        xcopy Output\Bin\WinVs2019Debug64\*.dmp $(Build.ArtifactStagingDirectory)\Bin\WinVs2019Debug64\ /C/D/Y
        xcopy Output\Bin\WinUWPVs2019Dev64\*.dll $(Build.ArtifactStagingDirectory)\Bin\ /C/D/Y
        xcopy Output\Bin\WinUWPVs2019Dev64\*.pdb $(Build.ArtifactStagingDirectory)\Bin\ /C/D/Y
        xcopy Output\Bin\WinUWPVs2019Dev64\*.exe $(Build.ArtifactStagingDirectory)\Bin\ /C/D/Y
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    condition: succeededOrFailed()
...
