[PLATFORMS]
ALL

[PERMUTATIONS]

BLEND_MODE
RENDER_PASS
MSAA
TWO_SIDED = FALSE
FLIP_WINDING = FALSE
CAMERA_MODE = CAMERA_MODE_PERSPECTIVE

[RENDERSTATE]

#include <Shaders/Materials/MaterialState.h>
WireFrame = false

[VERTEXSHADER]

#define USE_TEXCOORD0
#define USE_COLOR0

#if (RENDER_PASS == RENDER_PASS_EDITOR) || (RENDER_PASS == RENDER_PASS_PICKING) || (RENDER_PASS == RENDER_PASS_PICKING_WIREFRAME)
  #define USE_GAME_OBJECT_ID
#endif

#if defined(USE_GAME_OBJECT_ID)
  #define CUSTOM_INTERPOLATOR uint GameObjectID : GAME_OBJECT_ID;
#endif

#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Materials/MaterialInterpolator.h>

struct SpriteData
{
  float3 worldSpacePosition;
  float size;
  float maxScreenSize;
  float aspectRatio;
  uint colorRG;
  uint colorBA;
  uint texCoordScale;
  uint texCoordOffset;
  uint gameObjectID;
  uint reserved;
};

StructuredBuffer<SpriteData> spriteData;

VS_OUT main(uint VertexID : SV_VertexID)
{
  float2 vertexPositions[6] =
  {
    float2(0.0, 0.0),
    float2(0.0, 1.0),
    float2(1.0, 1.0),
    float2(0.0, 0.0),
    float2(1.0, 1.0),
    float2(1.0, 0.0),
  };

  uint index = VertexID / 6;
  uint vertexIndex = VertexID % 6;

  float2 texCoords = vertexPositions[vertexIndex];
  float2 vertexPosition = (texCoords - 0.5);

  texCoords.y = 1.0 - texCoords.y;

  SpriteData data = spriteData[index];
  float3 worldPosition = data.worldSpacePosition;
  float4 screenPosition = mul(GetWorldToScreenMatrix(), float4(worldPosition, 1.0));

  float distance = screenPosition.w;
  float2 scale = mul(GetCameraToScreenMatrix(), float4(1.0, 1.0, distance, 1.0)).xy;

  scale *= data.size;

  if (data.maxScreenSize > 0.0)
  {
    float2 maxScreenSize = (data.maxScreenSize * distance * 2.0) * ViewportSize.zw;
    scale = min(scale, maxScreenSize);
  }

  scale.x *= data.aspectRatio;
  screenPosition.xy += vertexPosition * scale;

  float2 texCoordScale = RG16FToFloat2(data.texCoordScale);
  float2 texCoordOffset = RG16FToFloat2(data.texCoordOffset);

  VS_OUT Output;
  Output.Position = screenPosition;
  Output.TexCoord0 = texCoords * texCoordScale + texCoordOffset;
  Output.Color0 = RGBA16FToFloat4(data.colorRG, data.colorBA);

  #if defined(USE_GAME_OBJECT_ID)
    Output.GameObjectID = data.gameObjectID;
  #endif

  return Output;
}

[PIXELSHADER]

#define USE_TEXCOORD0
#define USE_COLOR0

#if (RENDER_PASS == RENDER_PASS_EDITOR) || (RENDER_PASS == RENDER_PASS_PICKING) || (RENDER_PASS == RENDER_PASS_PICKING_WIREFRAME)
  #define USE_GAME_OBJECT_ID
#endif

#if defined(USE_GAME_OBJECT_ID)
  #define CUSTOM_INTERPOLATOR uint GameObjectID : GAME_OBJECT_ID;
#endif

#if BLEND_MODE == BLEND_MODE_MASKED && MSAA
  #define USE_ALPHA_TEST_SUPER_SAMPLING
#endif

#include <Shaders/Materials/MaterialHelper.h>

struct PS_OUT
{
  #if RENDER_PASS != RENDER_PASS_DEPTH_ONLY
    float4 Color : SV_Target;
  #endif

  #if defined(USE_ALPHA_TEST_SUPER_SAMPLING)
    uint Coverage : SV_Coverage;
  #endif
};

Texture2D SpriteTexture;
SamplerState SpriteTexture_AutoSampler;

float GetOpacity()
{
  float opacity = SpriteTexture.Sample(SpriteTexture_AutoSampler, G.Input.TexCoord0.xy).a * G.Input.Color0.a;

  #if BLEND_MODE == BLEND_MODE_MASKED
    return opacity - 0.5;
  #else
    return opacity;
  #endif
}

PS_OUT main(PS_IN Input)
{
  G.Input = Input;

  uint coverage = CalculateCoverage();
  if (coverage == 0)
  {
    discard;
  }

  float4 color = SpriteTexture.Sample(SpriteTexture_AutoSampler, Input.TexCoord0.xy) * Input.Color0;

  PS_OUT Output;

  #if (RENDER_PASS == RENDER_PASS_PICKING) || (RENDER_PASS == RENDER_PASS_PICKING_WIREFRAME)
    Output.Color = RGBA8ToFloat4(Input.GameObjectID);
  #elif RENDER_PASS == RENDER_PASS_EDITOR
    if (RenderPass == EDITOR_RENDER_PASS_STATIC_VS_DYNAMIC)
    {
      Output.Color = ColorizeGameObjectId(Input.GameObjectID);
    }
    else
    {
      Output.Color = color;
    }
  #elif RENDER_PASS != RENDER_PASS_DEPTH_ONLY
    Output.Color = color;
  #endif

  #if defined(USE_ALPHA_TEST_SUPER_SAMPLING)
    Output.Coverage = coverage;
  #endif

  return Output;
}
