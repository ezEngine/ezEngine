[PLATFORMS]
ALL

[PERMUTATIONS]

BLUR_DIRECTION
CAMERA_MODE
VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX

[RENDERSTATE]

DepthTest = false
DepthTestFunc = CompareFunc_Less
DepthWrite = false
CullMode = CullMode_None

[VERTEXSHADER]

#include <Shaders/Pipeline/FullscreenTriangleVertexShader.h>

[GEOMETRYSHADER]

#include <Shaders/Pipeline/FullscreenTriangleStereoGeometryShader.h>

[PIXELSHADER]

#include <Shaders/Pipeline/FullscreenTriangleInterpolator.h>
#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Common/ObjectConstants.h>
#include <Shaders/Materials/DefaultMaterialCB.h>
#include "BilateralBlurConstants.h"
#include "Utils.h"

Texture2DArray BlurSource;
Texture2DArray DepthBuffer;


float LoadLinearDepth(int2 texelCoord)
{
  return LinearizeZBufferDepth(DepthBuffer.Load(int4(texelCoord, s_ActiveCameraEyeIndex, 0)).r);
}


// Note that with the bilateral blur we can't do any of the usual optimizations like
// using linear sampling or using the symmetry of the gaussian function.
float4 BlurFunction(int2 texelCoord, float gaussianExp, float centerDepth, inout float totalWeights)
{
  // https://en.wikipedia.org/wiki/Bilateral_filter
  float depth = LoadLinearDepth(texelCoord);
  float ddiff = depth - centerDepth;
  float w = exp(gaussianExp - ddiff * ddiff * Sharpness);
  totalWeights += w;

  return w * BlurSource.Load(int4(texelCoord, s_ActiveCameraEyeIndex, 0));
}

float4 main(PS_IN input) : SV_Target
{
#if CAMERA_MODE == CAMERA_MODE_STEREO
  s_ActiveCameraEyeIndex = input.RenderTargetArrayIndex;
#endif
  uint width, height, elements, levels;
  BlurSource.GetDimensions(0, width, height, elements, levels);

  int2 texelCoord = int2(input.TexCoord0 * float2(width, height));

  float centerDepth = LoadLinearDepth(texelCoord);
  float4 accum = BlurSource.Load(int4(texelCoord, s_ActiveCameraEyeIndex, 0));
  float totalWeights = 1.0f;

  int2 texelCoordPos = texelCoord;
  int2 texelCoordNeg = texelCoord;
  float sampleDistance = 0.0f;
  for (uint r = 1; r <= BlurRadius; ++r) // todo: Should BlurRadius be a permutation variable so we can unroll it?
  {
  #if BLUR_DIRECTION == BLUR_DIRECTION_HORIZONTAL
    --texelCoordNeg.x;
    ++texelCoordPos.x;
  #else
    --texelCoordNeg.y;
    ++texelCoordPos.y;
  #endif

    sampleDistance += 1.0f;
    float gaussianExp = -sampleDistance * sampleDistance * GaussianFalloff;

    accum += BlurFunction(texelCoordPos, gaussianExp, centerDepth, totalWeights);
    accum += BlurFunction(texelCoordNeg, gaussianExp, centerDepth, totalWeights);
  }

  return accum / totalWeights;
}
