[PLATFORMS]
ALL

[PERMUTATIONS]

CAMERA_MODE = CAMERA_MODE_PERSPECTIVE

[RENDERSTATE]

DepthTest = false
DepthTestFunc = CompareFunc_Less
DepthWrite = false
CullMode = CullMode_None

[COMPUTESHADER]

#include <Shaders/Common/Common.h>
#include <Shaders/Common/BRDF.h>
#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Common/ObjectConstants.h>
#include <Shaders/Materials/DefaultMaterialCB.h>
#include "ReflectionFilteredSpecularConstants.h"

TextureCube InputCubemap;
RWTexture2DArray<half4> ReflectionOutput;

// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float radicalInverse_VdC(uint bits) {
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
 }

float2 hammersley2d(uint i, uint N) {
     return float2(float(i)/float(N), radicalInverse_VdC(i));
 }

// https://github.com/TwoTailsGames/Unity-Built-in-Shaders/blob/master/CGIncludes/UnityImageBasedLighting.cginc
void GetLocalFrame(float3 N, out float3 tangentX, out float3 tangentY)
{
    float3 upVector     = abs(N.z) < 0.999f ? float3(0.0f, 0.0f, 1.0f) : float3(1.0f, 0.0f, 0.0f);
    tangentX            = normalize(cross(upVector, N));
    tangentY            = cross(N, tangentX);
}

void importanceSampleGGXDir(float2 u,
                            float3 V,
                            float3 N,
                            float3 tangentX,
                            float3 tangentY,
                            float roughness,
                            out float3 H,
                            out float3 L)
{
    // GGX NDF sampling
    float cosThetaH = sqrt((1.0f - u.x) / (1.0f + (roughness * roughness - 1.0f) * u.x));
    float sinThetaH = sqrt(max(0.0f, 1.0f - cosThetaH * cosThetaH));
    float phiH      = PI * 2.0f * u.y;

    // Transform from spherical into cartesian
    H = float3(sinThetaH * cos(phiH), sinThetaH * sin(phiH), cosThetaH);
    // Local to world
    H = tangentX * H.x + tangentY * H.y + N * H.z;

    // Convert sample from half angle to incident angle
    L = 2.0f * dot(V, H) * H - V;
}


inline float D_GGX_Divide_Pi (float NdotH, float roughness)
{
  const float invPi = 1.0f / PI;
  return SpecularGGX(roughness, NdotH) *  invPi;
}

// Ref: Listing 19 in "Moving Frostbite to PBR"
float4  integrateCubeLDOnly(in float3 V,in float3 N,in float roughness)
{
  uint sampleCount = 64;
  float width, height, mipCount;
  InputCubemap.GetDimensions(0, width, height, mipCount);

  float3 tangentX, tangentY;
  GetLocalFrame(N, tangentX, tangentY);

  float4  accBrdf = 0;
  float   accBrdfWeight = 0;
  for (uint i=0; i<sampleCount; ++i)
  {
    float2  eta = hammersley2d(i, sampleCount);
    float3 L;
    float3 H;
    importanceSampleGGXDir(eta , V, N, tangentX, tangentY, roughness , H, L);
    float  NdotL = dot(N, L);
    if (NdotL > 0)
    {
      // Use pre -filtered  importance  sampling (i.e use  lower  mipmap
      // level  for  fetching  sample  with  low  probability  in  order
      // to  reduce  the  variance).
      // (Reference: GPU  Gem3)
      //
      // Since we pre -integrate  the  result  for  normal  direction ,
      // N == V and  then  NdotH ==  LdotH. This is why the  BRDF  pdf
      // can be  simplifed  from:
      //     pdf = D_GGX_Divide_Pi(NdotH , roughness)*NdotH /(4* LdotH);
      // to
      //     pdf = D_GGX_Divide_Pi(NdotH , roughness) / 4;
      //
      // The  mipmap  level is  clamped  to  something  lower  than 8x8
      // in  order to  avoid   cubemap  filtering  issues
      //
      //   - OmegaS: Solid  angle  associated  to a sample
      //   - OmegaP: Solid  angle  associated  to a pixel  of the  cubemap
      float  NdotH = saturate(dot(N, H));
      float  LdotH = saturate(dot(L, H));
      
      float  pdf = D_GGX_Divide_Pi(NdotH , roughness) / 4;
      float  omegaS = 1.0 / (sampleCount * pdf);
      float  omegaP = 4.0 * PI / (6.0 * width * width);
      float  mipLevel = 0.5 * log2(omegaS / omegaP);
 
      float4  Li = InputCubemap.SampleLevel(LinearSampler, L, mipLevel);

      accBrdf  += Li * NdotL;
      accBrdfWeight  += NdotL;
    }
  }
  return  accBrdf * (1.0f / accBrdfWeight);
}

float3 GetRayDir(float2 texCoord, uint faceIndex)
{
  float3 Forward;
  float3 Up2;
  switch (faceIndex)
  {

    case 0:
      Forward = float3(1.0f, 0.0f, 0.0f);
      Up2 = float3(0.0f, 0.0f, 1.0f);
      break;
    case 1:
      Forward = float3(-1.0f, 0.0f, 0.0f);
      Up2 = float3(0.0f, 0.0f, 1.0f);
      break;
    case 2:
      Forward = float3(0.0f, 0.0f, 1.0f);
      Up2 = float3(0.0f, 1.0f, 0.0f);
      break;
    case 3:
      Forward = float3(0.0f, 0.0f, -1.0f);
      Up2 = float3(0.0f, -1.0f, 0.0f);
      break;
    case 4:
      Forward = float3(0.0f, -1.0f, 0.0f);
      Up2 = float3(0.0f, 0.0f, 1.0f);
      break;
    case 5:
      Forward = float3(0.0f, 1.0f, 0.0f);
      Up2 = float3(0.0f, 0.0f, 1.0f);
      break;
  }

  float3 Right = cross(Forward.xyz, Up2.xyz);
  float3 dir = Right.xyz * (texCoord.x * -2.0f + 1.0f);
  dir += Up2.xyz * (texCoord.y * -2.0f + 1.0f) + Forward.xyz;
  dir = normalize(dir);
  return dir;
}

[numthreads(8, 8, 1)]
void main(uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{
  const uint faceIndex = groupID.z;
  const uint2 pixelIndex = uint2(groupID.x * 8 + groupThreadID.x, groupID.y * 8 + groupThreadID.y);

  uint width, height, mipCount;
  ReflectionOutput.GetDimensions(width, height, mipCount);
  // Check for out of bounds threads (happens on last 4x4 mip level)
  if (pixelIndex.x >= width || pixelIndex.y >= height)
    return;

  // Compute tex coord using centroid sampling.
  const float2 texCoord = float2(((float)pixelIndex.x + 0.5) / width, ((float)pixelIndex.y + 0.5) / height );
  const float3 dir = GetRayDir(texCoord, faceIndex);

  float roughness = RoughnessFromMipLevel(MipLevel, 6);

  float4 inputColor;
  if (MipLevel == 0)
  {
    // We have to manually compute the mip level to sample in the compute shader.
    float inputWidth, inputHeight, inputMipCount;
    InputCubemap.GetDimensions(0, inputWidth, inputHeight, inputMipCount);
    float sampleMipLevel = log2(inputWidth) - log2(width);

    inputColor = InputCubemap.SampleLevel(LinearSampler, CubeMapDirection(dir), sampleMipLevel);
  }
  else
  {
    inputColor = integrateCubeLDOnly(CubeMapDirection(dir), CubeMapDirection(dir), roughness);
  }

  ReflectionOutput[uint3(pixelIndex, faceIndex)] = inputColor;
}
