[PLATFORMS]
ALL

[PERMUTATIONS]

RENDER_PASS
PARTICLE_RENDER_MODE
PARTICLE_QUAD_MODE
PARTICLE_LIGHTING_MODE
SHADING_QUALITY
CAMERA_MODE
VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX

[RENDERSTATE]

BlendingEnabled0 = true
SourceBlend0 = Blend_SrcAlpha

DepthTest = true
DepthWrite = false
CullMode = CullMode_None

#if PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_ADDITIVE
  DestBlend0 = Blend_One
  DestBlendAlpha0 = Blend_One
  SourceBlendAlpha0 = Blend_Zero
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_BLENDED
  DestBlend0 = Blend_InvSrcAlpha
  DestBlendAlpha0 = Blend_InvSrcAlpha
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_OPAQUE
  BlendingEnabled0 = false
  DepthWrite = true
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_DISTORTION
  DestBlend0 = Blend_InvSrcAlpha
  DestBlendAlpha0 = Blend_InvSrcAlpha
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_BLENDADD
  SourceBlend0 = Blend_One
  DestBlend0 = Blend_InvSrcAlpha
  DestBlendAlpha0 = Blend_InvSrcAlpha
#endif

[SHADER]

#define CUSTOM_INTERPOLATOR float FogAmount : FOG;
#define USE_TEXCOORD0
#define USE_COLOR0

[VERTEXSHADER]

#include <Shaders/Particles/ParticleCommonVS.h>

#if PARTICLE_QUAD_MODE == PARTICLE_QUAD_MODE_BILLBOARD
  #include <Shaders/Particles/BillboardQuadParticleShaderData.h>
#else
  #include <Shaders/Particles/TangentQuadParticleShaderData.h>
#endif

VS_OUT main(uint VertexID : SV_VertexID, uint InstanceID : SV_InstanceID)
{
#if CAMERA_MODE == CAMERA_MODE_STEREO
  s_ActiveCameraEyeIndex = InstanceID % 2;
#endif

  VS_OUT ret;
#if defined(VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX) && CAMERA_MODE == CAMERA_MODE_STEREO    
  ret.RenderTargetArrayIndex = InstanceID;
#endif

  ret.InstanceID = InstanceID;

  uint dataIndex = CalcQuadParticleDataIndex(VertexID);
  uint vertexIndex = CalcQuadParticleVertexIndex(VertexID);

  ezBaseParticleShaderData baseParticle = particleBaseData[dataIndex];
  UNPACKHALF2(particleLife, particleSize, baseParticle.LifeAndSize);
  ret.Color0 = UNPACKCOLOR4H(baseParticle.Color);

  Quad quad;

#if PARTICLE_QUAD_MODE == PARTICLE_QUAD_MODE_BILLBOARD

  ezBillboardQuadParticleShaderData billboardData = particleBillboardQuadData[dataIndex];
  UNPACKHALF2(rotationOffset, rotationSpeed, billboardData.RotationOffsetAndSpeed);
  quad = CalcQuadOutputPositionAsBillboard(vertexIndex, billboardData.Position, rotationOffset, rotationSpeed, particleSize);

#elif PARTICLE_QUAD_MODE == PARTICLE_QUAD_MODE_TANGENTS

  ezTangentQuadParticleShaderData tangentData = particleTangentQuadData[dataIndex];
  quad = CalcQuadOutputPositionWithTangents(vertexIndex, tangentData.Position.xyz, tangentData.TangentX, tangentData.TangentZ, particleSize);

#elif PARTICLE_QUAD_MODE == PARTICLE_QUAD_MODE_AXIS_ALIGNED

  ezTangentQuadParticleShaderData tangentData = particleTangentQuadData[dataIndex];
  quad = CalcQuadOutputPositionWithAlignedAxis(vertexIndex, tangentData.Position.xyz, tangentData.TangentX, tangentData.TangentZ, particleSize);

#endif

  ret.Position = quad.screenPosition;

  float fVariation = (baseParticle.Variation & 255) / 255.0;
  ret.TexCoord0 = ComputeAtlasTexCoordRandomAnimated(QuadTexCoords[vertexIndex], TextureAtlasVariationFramesX, TextureAtlasVariationFramesY, fVariation, TextureAtlasFlipbookFramesX, TextureAtlasFlipbookFramesY, 1.0f - particleLife);

#if PARTICLE_LIGHTING_MODE == PARTICLE_LIGHTING_MODE_VERTEX_LIT
  float3 diffuseLight = CalculateParticleLighting(quad.screenPosition, quad.worldPosition, quad.normal);
#else
  float3 diffuseLight = 1;
#endif

  ret.FogAmount = GetFogAmount(mul(GetScreenToWorldMatrix(), ret.Position).xyz);

#if RENDER_PASS == RENDER_PASS_EDITOR
  if (RenderPass == EDITOR_RENDER_PASS_DIFFUSE_LIT_ONLY)
  {
    ret.Color0 = float4(diffuseLight * 0.5, 1);
  }
  else if (RenderPass == EDITOR_RENDER_PASS_PIXEL_NORMALS || RenderPass == EDITOR_RENDER_PASS_VERTEX_NORMALS)
  {
    ret.Color0 = float4(quad.normal, 1);
  }
#else
  ret.Color0.rgb *= diffuseLight;
#endif

  return ret;
}

[GEOMETRYSHADER]

void CopyCustomInterpolators(GS_OUT output, VS_OUT input)
{
  output.FogAmount = input.FogAmount;
}

#include <Shaders/Materials/MaterialStereoGeometryShader.h>

[PIXELSHADER]

#include "QuadPixelShader.h"
