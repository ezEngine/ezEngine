[PLATFORMS]
ALL

[PERMUTATIONS]

PARTICLE_RENDER_MODE
PARTICLE_QUAD_MODE
SHADING_QUALITY=SHADING_QUALITY_NORMAL
CAMERA_MODE

[RENDERSTATE]

BlendingEnabled0 = true
SourceBlend0 = Blend_SrcAlpha

DepthTest = true
DepthWrite = false
CullMode = CullMode_None

#if PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_ADDITIVE
  DestBlend0 = Blend_One
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_BLENDED
  DestBlend0 = Blend_InvSrcAlpha
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_OPAQUE
  BlendingEnabled0 = false
  DepthWrite = true
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_DISTORTION
  DestBlend0 = Blend_InvSrcAlpha
#endif

[VERTEXSHADER]

#define CUSTOM_INTERPOLATOR float FogAmount : FOG;

#include <Shaders/Particles/ParticleCommonVS.h>

#if PARTICLE_QUAD_MODE == PARTICLE_QUAD_MODE_BILLBOARD
  #include <Shaders/Particles/BillboardQuadParticleShaderData.h>
#else
  #include <Shaders/Particles/TangentQuadParticleShaderData.h>
#endif

VS_OUT main(uint VertexID : SV_VertexID)
{
  VS_OUT ret;
  ret.InstanceID = 0;

  uint dataIndex = CalcQuadParticleDataIndex(VertexID);
  uint vertexIndex = CalcQuadParticleVertexIndex(VertexID);

  ezBaseParticleShaderData baseParticle = particleBaseData[dataIndex];
  UNPACKHALF2(particleLife, particleSize, baseParticle.LifeAndSize);
  ret.Color0 = UNPACKCOLOR4H(baseParticle.Color);


#if PARTICLE_QUAD_MODE == PARTICLE_QUAD_MODE_BILLBOARD

  ezBillboardQuadParticleShaderData billboardData = particleBillboardQuadData[dataIndex];
  UNPACKHALF2(rotationOffset, rotationSpeed, billboardData.RotationOffsetAndSpeed);
  ret.Position = CalcQuadOutputPositionAsBillboard(vertexIndex, billboardData.Position, rotationOffset, rotationSpeed, particleSize);

#elif PARTICLE_QUAD_MODE == PARTICLE_QUAD_MODE_TANGENTS

  ezTangentQuadParticleShaderData tangentData = particleTangentQuadData[dataIndex];
  ret.Position = CalcQuadOutputPositionWithTangents(vertexIndex, tangentData.Position.xyz, tangentData.TangentX, tangentData.TangentZ, particleSize);

#elif PARTICLE_QUAD_MODE == PARTICLE_QUAD_MODE_AXIS_ALIGNED

  ezTangentQuadParticleShaderData tangentData = particleTangentQuadData[dataIndex];
  ret.Position = CalcQuadOutputPositionWithAlignedAxis(vertexIndex, tangentData.Position.xyz, tangentData.TangentX, tangentData.TangentZ, particleSize);

#endif

  float fVariation = (baseParticle.Variation & 255) / 255.0;
  ret.TexCoord0 = ComputeAtlasTexCoordRandomAnimated(QuadTexCoords[vertexIndex], TextureAtlasVariationFramesX, TextureAtlasVariationFramesY, fVariation, TextureAtlasFlipbookFramesX, TextureAtlasFlipbookFramesY, 1.0f - particleLife);

  ret.FogAmount = GetFogAmount(mul(GetScreenToWorldMatrix(), ret.Position).xyz);
  return ret;
}


[PIXELSHADER]

#define CUSTOM_INTERPOLATOR float FogAmount : FOG;

#include <Shaders/Particles/ParticleCommonPS.h>

Texture2D ParticleTexture;
SamplerState ParticleTexture_AutoSampler;

#if PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_DISTORTION

  Texture2D ParticleDistortionTexture;
  SamplerState ParticleDistortionTexture_AutoSampler;

#endif

float4 main(PS_IN Input) : SV_Target
{
  float4 texCol = ParticleTexture.Sample(ParticleTexture_AutoSampler, Input.TexCoord0.xy);

  float proximityFadeOut = 1.0;

  #if CAMERA_MODE != CAMERA_MODE_ORTHO
    proximityFadeOut = CalcProximityFadeOut(Input.Position);
  #endif

  float opacity = Input.Color0.a * texCol.a * proximityFadeOut;


  #if PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_DISTORTION
    clip(opacity - 0.01);

    float4 texDistort = ParticleDistortionTexture.Sample(ParticleDistortionTexture_AutoSampler, Input.TexCoord0.xy);
    float3 sceneColor = SampleSceneColor(Input.Position.xy + (texDistort - 0.5) * float2(DistortionStrength, DistortionStrength));

    return float4(sceneColor.rgb * Input.Color0.rgb, opacity);

  #else

    float3 finalColor = texCol.rgb * Input.Color0.rgb;

    //#if defined(USE_FOG)
      #if PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_ADDITIVE
        opacity *= Input.FogAmount;
      #else
        finalColor = ApplyFog(finalColor, Input.FogAmount);
      #endif
    //#endif

    clip(opacity - 0.01);

    return float4(finalColor, opacity);

  #endif
}

