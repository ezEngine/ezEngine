[PLATFORMS]
ALL

[PERMUTATIONS]

TWO_SIDED
PARTICLE_RENDER_MODE
PARTICLE_TRAIL_POINTS
SHADING_QUALITY=SHADING_QUALITY_NORMAL
CAMERA_MODE

[RENDERSTATE]

BlendingEnabled0 = true
SourceBlend0 = Blend_SrcAlpha
DepthTest = true
DepthWrite = false
CullMode = CullMode_None

#if PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_ADDITIVE
  DestBlend0 = Blend_One
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_BLENDED
  DestBlend0 = Blend_InvSrcAlpha
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_OPAQUE
  BlendingEnabled0 = false
  DepthWrite = true
#endif

[VERTEXSHADER]

#define CUSTOM_INTERPOLATOR float FogAmount : FOG;

#include <Shaders/Particles/ParticleCommonVS.h>
#include <Shaders/Particles/TrailShaderData.h>

#define TRAIL_SEGMENTS (PARTICLE_TRAIL_POINTS - 1)

VS_OUT main(uint VertexID : SV_VertexID)
{
  VS_OUT ret;

  int trailIndexOffset[6] = { 0, 1, 1, 0, 1, 0 };

  // TODO: We could use NumUsedTrailPoints instead of TRAIL_SEGMENTS and then render fewer triangles
  // However, TRAIL_SEGMENTS is a compile time constant, so not clear what might be more efficient.
  int particleIndex = VertexID / (6 * TRAIL_SEGMENTS);
  int trailPointIndex = (VertexID - (particleIndex * 6 * TRAIL_SEGMENTS)) / 6;
  int vertexSubIndex = VertexID % 6;
  int vertexTrailPointIndex = trailPointIndex + trailIndexOffset[vertexSubIndex];

  ezBaseParticleShaderData baseParticle = particleBaseData[particleIndex];
  UNPACKHALF2(particleLife, particleSize, baseParticle.LifeAndSize);
  ret.Color0 = UNPACKCOLOR4H(baseParticle.Color);

  ezTrailParticleShaderData trailParticle = particleTrailData[particleIndex];

  if (trailPointIndex + 1 >= trailParticle.NumPoints)
  {
    ret.Position = float4(0, 0, 0, 0);
    ret.TexCoord0 = float2(0, 0);
    ret.Color0 = float4(0, 1, 1, 0);
    ret.FogAmount = 1.0;
  }
  else
  {
    // doing this and then accessing the data will silently not work on nVidia cards and just result in the drawcall being ignored
    //ezTrailParticlePointsData trail = particlePointsData[particleIndex];

    float fVariation = (baseParticle.Variation & 255) / 255.0;
    float4 textureAtlasRect = ComputeAtlasRectRandomAnimated(TextureAtlasVariationFramesX, TextureAtlasVariationFramesY, fVariation, TextureAtlasFlipbookFramesX, TextureAtlasFlipbookFramesY, 1.0f - particleLife);

    // UV step is currently calculated over the maximum number of segments, instead of the active number of segments
    // this means at start the texture is cut off, instead of stretching over the full UV space
    // doing it differently would be very complicated though
    float uvStep = textureAtlasRect.z / (NumUsedTrailPoints - 2);
    float uvCoord = uvStep * vertexTrailPointIndex;
    float uvSubtract = uvStep * SnapshotFraction; // to adjust the UV coordinates while the first position glides along, to not have jumps when a new segment is added

    int prevTrailPointIdx = max(vertexTrailPointIndex - 1, 0);
    int nextTrailPointIdx = min(vertexTrailPointIndex + 1, trailParticle.NumPoints - 1);

    float3 position0 = particlePointsData[particleIndex].Positions[vertexTrailPointIndex].xyz;
    float3 positionP = particlePointsData[particleIndex].Positions[prevTrailPointIdx].xyz;
    float3 positionN = particlePointsData[particleIndex].Positions[nextTrailPointIdx].xyz;

    float3 avgDirection = positionN - positionP;

    float3 dirRight = mul(ObjectToWorldMatrix, float4(avgDirection, 0)).xyz;
    float3 dirUp = normalize(cross(dirRight, GetCameraDirForwards())) * particleSize;

    float4 offsetRight = float4(dirRight * QuadTexCoords[vertexSubIndex].x, 0);
    float4 offsetUp = float4(dirUp * (QuadTexCoords[vertexSubIndex].y - 0.5), 0);

    float4 position = mul(ObjectToWorldMatrix, float4(position0, 1)) + offsetUp;

    ret.Position = mul(GetWorldToScreenMatrix(), position);
    ret.TexCoord0.x = textureAtlasRect.x + uvCoord;
    ret.TexCoord0.y = textureAtlasRect.y + textureAtlasRect.w * QuadTexCoords[vertexSubIndex].y;

    // do NOT adjust the UV of the very first vertex, that is the one moves all the time and is always at UV.x == 0
    // however, DO adjust the coordinate of the LAST vertex, since that is not moving and needs to "fade away" (out of the UV space, ie > 1)
    if (ret.TexCoord0.x > textureAtlasRect.x)
      ret.TexCoord0.x -= uvSubtract;

    // manually clamp the texCoords
    // this could be set as a sampler state, but it would not work with sub-ranges (once we support texture atlases)
    ret.TexCoord0.x = min(textureAtlasRect.x + textureAtlasRect.z, ret.TexCoord0.x);

    ret.FogAmount = GetFogAmount(position);
  }

  return ret;
}

[PIXELSHADER]

#define CUSTOM_INTERPOLATOR float FogAmount : FOG;

#include <Shaders/Particles/ParticleCommonPS.h>

Texture2D ParticleTexture;
SamplerState ParticleTexture_AutoSampler;

float4 main(PS_IN Input) : SV_Target
{
  float4 texCol = ParticleTexture.Sample(ParticleTexture_AutoSampler, Input.TexCoord0.xy);

  float proximityFadeOut = 1.0;

  #if CAMERA_MODE != CAMERA_MODE_ORTHO
    proximityFadeOut = CalcProximityFadeOut(Input.Position);
  #endif

  float opacity = Input.Color0.a * texCol.a * proximityFadeOut;

  float3 finalColor = texCol.rgb * Input.Color0.rgb;

  //#if defined(USE_FOG)
    #if PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_ADDITIVE
      opacity *= Input.FogAmount;
    #else
      finalColor = ApplyFog(finalColor, Input.FogAmount);
    #endif
  //#endif

  clip(opacity - 0.01);

  return float4(finalColor, opacity);
}

