[PLATFORMS]
ALL

[PERMUTATIONS]

RENDER_PASS
PARTICLE_RENDER_MODE
PARTICLE_TRAIL_POINTS
PARTICLE_LIGHTING_MODE
SHADING_QUALITY
CAMERA_MODE
VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX

[RENDERSTATE]

BlendingEnabled0 = true
SourceBlend0 = Blend_SrcAlpha
DepthTest = true
DepthWrite = false
CullMode = CullMode_None

#if PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_ADDITIVE
  DestBlend0 = Blend_One
  DestBlendAlpha0 = Blend_One
  SourceBlendAlpha0 = Blend_Zero
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_BLENDED
  DestBlend0 = Blend_InvSrcAlpha
  DestBlendAlpha0 = Blend_InvSrcAlpha
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_OPAQUE
  BlendingEnabled0 = false
  DepthWrite = true
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_BLENDADD
  SourceBlend0 = Blend_One
  DestBlend0 = Blend_InvSrcAlpha
  DestBlendAlpha0 = Blend_InvSrcAlpha
#endif

[SHADER]

#define CUSTOM_INTERPOLATOR float FogAmount : FOG;
#define USE_TEXCOORD0
#define USE_COLOR0

[VERTEXSHADER]

#include <Shaders/Particles/ParticleCommonVS.h>
#include <Shaders/Particles/TrailShaderData.h>

#define TRAIL_SEGMENTS (PARTICLE_TRAIL_POINTS - 1)

VS_OUT main(uint VertexID : SV_VertexID, uint InstanceID : SV_InstanceID)
{
#if CAMERA_MODE == CAMERA_MODE_STEREO
  s_ActiveCameraEyeIndex = InstanceID % 2;
#endif

  VS_OUT ret;
#if VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX == TRUE && CAMERA_MODE == CAMERA_MODE_STEREO    
  ret.RenderTargetArrayIndex = InstanceID;
#endif

  int trailIndexOffset[6] = { 0, 1, 1, 0, 1, 0 };

  // TODO: We could use NumUsedTrailPoints instead of TRAIL_SEGMENTS and then render fewer triangles
  // However, TRAIL_SEGMENTS is a compile time constant, so not clear what might be more efficient.
  int particleIndex = VertexID / (6 * TRAIL_SEGMENTS);
  int trailPointIndex = (VertexID - (particleIndex * 6 * TRAIL_SEGMENTS)) / 6;
  int vertexSubIndex = VertexID % 6;
  int vertexTrailPointIndex = trailPointIndex + trailIndexOffset[vertexSubIndex];

  ezBaseParticleShaderData baseParticle = particleBaseData[particleIndex];
  UNPACKHALF2(particleLife, particleSize, baseParticle.LifeAndSize);
  ret.Color0 = UNPACKCOLOR4H(baseParticle.Color);

  ezTrailParticleShaderData trailParticle = particleTrailData[particleIndex];

  if (trailPointIndex + 1 >= trailParticle.NumPoints)
  {
    ret.Position = float4(0, 0, 0, 0);
    ret.TexCoord0 = float2(0, 0);
    ret.Color0 = float4(0, 1, 1, 0);
    ret.FogAmount = 1.0;
  }
  else
  {
    // doing this and then accessing the data will silently not work on nVidia cards and just result in the drawcall being ignored
    //ezTrailParticlePointsData trail = particlePointsData[particleIndex];

    float fVariation = (baseParticle.Variation & 255) / 255.0;
    float4 textureAtlasRect = ComputeAtlasRectRandomAnimated(TextureAtlasVariationFramesX, TextureAtlasVariationFramesY, fVariation, TextureAtlasFlipbookFramesX, TextureAtlasFlipbookFramesY, 1.0f - particleLife);

    // UV step is currently calculated over the maximum number of segments, instead of the active number of segments
    // this means at start the texture is cut off, instead of stretching over the full UV space
    // doing it differently would be very complicated though
    float uvStep = textureAtlasRect.z / (NumUsedTrailPoints - 2);
    float uvCoord = uvStep * vertexTrailPointIndex;
    float uvSubtract = uvStep * SnapshotFraction; // to adjust the UV coordinates while the first position glides along, to not have jumps when a new segment is added

    int prevTrailPointIdx = max(vertexTrailPointIndex - 1, 0);
    int nextTrailPointIdx = min(vertexTrailPointIndex + 1, trailParticle.NumPoints - 1);

    float3 position0 = particlePointsData[particleIndex].Positions[vertexTrailPointIndex].xyz;
    float3 positionP = particlePointsData[particleIndex].Positions[prevTrailPointIdx].xyz;
    float3 positionN = particlePointsData[particleIndex].Positions[nextTrailPointIdx].xyz;

    float3 avgDirection = positionN - positionP;

    float3 dirRight = mul(ObjectToWorldMatrix, float4(avgDirection, 0)).xyz;
    float3 dirUp = normalize(cross(dirRight, GetCameraDirForwards())) * particleSize;

    float4 offsetUp = float4(dirUp * (QuadTexCoords[vertexSubIndex].y - 0.5), 0);

    float4 worldPosition = mul(ObjectToWorldMatrix, float4(position0, 1)) + offsetUp;
    float4 screenPosition = mul(GetWorldToScreenMatrix(), worldPosition);

    ret.Position = screenPosition;
    ret.TexCoord0.y = textureAtlasRect.x + uvCoord;
    ret.TexCoord0.x = textureAtlasRect.y + textureAtlasRect.w * QuadTexCoords[vertexSubIndex].y;

    // do NOT adjust the UV of the very first vertex, that is the one moves all the time and is always at UV.x == 0
    // however, DO adjust the coordinate of the LAST vertex, since that is not moving and needs to "fade away" (out of the UV space, ie > 1)
    if (ret.TexCoord0.y > textureAtlasRect.x)
      ret.TexCoord0.y -= uvSubtract;

    // manually clamp the texCoords
    // this could be set as a sampler state, but it would not work with sub-ranges
    ret.TexCoord0.y = min(textureAtlasRect.x + textureAtlasRect.z, ret.TexCoord0.y);

    float3 centerNormal = normalize(cross(dirRight, dirUp));
    float3 cornerNormal = normalize(offsetUp.xyz);
    float3 normal = normalize(lerp(centerNormal, cornerNormal, NormalCurvature));

#if PARTICLE_LIGHTING_MODE == PARTICLE_LIGHTING_MODE_VERTEX_LIT
    float3 diffuseLight = CalculateParticleLighting(screenPosition, worldPosition, normal);
#else
    float3 diffuseLight = 1;
#endif

#if RENDER_PASS == RENDER_PASS_EDITOR
    if (RenderPass == EDITOR_RENDER_PASS_DIFFUSE_LIT_ONLY)
    {
      ret.Color0 = float4(diffuseLight * 0.5, 1);
    }
    else if (RenderPass == EDITOR_RENDER_PASS_PIXEL_NORMALS || RenderPass == EDITOR_RENDER_PASS_VERTEX_NORMALS)
    {
      ret.Color0 = float4(normal, 1);
    }
#else
    ret.Color0.rgb *= diffuseLight;
#endif

    ret.FogAmount = GetFogAmount(worldPosition.xyz);
  }

  return ret;
}

[GEOMETRYSHADER]

#define CopyCustomInterpolators(output, input) output.FogAmount = input.FogAmount;

#include <Shaders/Materials/MaterialStereoGeometryShader.h>

[PIXELSHADER]

#include "QuadPixelShader.h"
