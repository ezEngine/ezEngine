[PLATFORMS]
ALL

[PERMUTATIONS]

CAMERA_MODE
VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX
TOPOLOGY

[RENDERSTATE]

BlendingEnabled0 = true
DestBlend0 = Blend_InvSrcAlpha
SourceBlend0 = Blend_SrcAlpha
DestBlendAlpha0 = Blend_InvSrcAlpha

DepthTest = true
DepthWrite = true

[VERTEXSHADER]

#define USE_COLOR0

#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Materials/MaterialInterpolator.h>

struct BoxData
{
	Transform transform;
	float4 color;
};

StructuredBuffer<BoxData> boxData;

struct VS_IN_POS_ONLY
{
  float3 Position : POSITION;
  uint InstanceID : SV_InstanceID;
};

VS_OUT main(VS_IN_POS_ONLY Input)
{
#if CAMERA_MODE == CAMERA_MODE_STEREO
  s_ActiveCameraEyeIndex = Input.InstanceID % 2;
#endif

  #if defined(CAMERA_MODE) && CAMERA_MODE == CAMERA_MODE_STEREO
    float4x4 worldMatrix = TransformToMatrix(boxData[Input.InstanceID / 2].transform);
  #else
    float4x4 worldMatrix = TransformToMatrix(boxData[Input.InstanceID].transform);
  #endif
  
  float4 worldPos = mul(worldMatrix, float4(Input.Position, 1.0f));

  VS_OUT RetVal;
  RetVal.Position = mul(GetWorldToScreenMatrix(), worldPos);
  #if defined(CAMERA_MODE) && CAMERA_MODE == CAMERA_MODE_STEREO
    RetVal.Color0 = boxData[Input.InstanceID / 2].color;
  #else
    RetVal.Color0 = boxData[Input.InstanceID].color;
  #endif
  
  RetVal.InstanceID = Input.InstanceID;

  return RetVal;
}

[GEOMETRYSHADER]

#define USE_COLOR0

#include <Shaders/Materials/StereoGeometryShader.h>

[PIXELSHADER]

#define USE_COLOR0

#include <Shaders/Materials/MaterialInterpolator.h>

float4 main(PS_IN Input) : SV_Target
{
  return Input.Color0;
}

