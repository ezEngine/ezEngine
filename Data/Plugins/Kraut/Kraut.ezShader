[PLATFORMS]
ALL

[PERMUTATIONS]

BLEND_MODE
RENDER_PASS
SHADING_MODE
TWO_SIDED
FLIP_WINDING = FALSE
MSAA
CAMERA_MODE
SHADING_QUALITY
FORWARD_PASS_WRITE_DEPTH
MATERIAL_PREVIEW
VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX

[MATERIALPARAMETER]

Permutation BLEND_MODE;
Permutation SHADING_MODE;
Permutation TWO_SIDED;

Texture2D BaseTexture;

Color VariationColor @Default(Color(0.0, 0.0, 0.0, 0.0)); // actually variation color
Color SubsurfaceColor @Default(Color(0.0, 0.0, 0.0));

bool UseNormalTexture;
Texture2D NormalTexture;

bool UseRoughnessTexture;
Texture2D RoughnessTexture @Default("White.color");
float RoughnessValue @Default(1.0) @Clamp(0.0, 2.0);

bool UseOcclusionTexture;
Texture2D OcclusionTexture;

int KrautTreeMode; // 0 == regular mesh, 1 == frond, 2 == leaf, 3 == static impostor, 4 == billboard impostor

[RENDERSTATE]

#include <Shaders/Materials/MaterialState.h>

[SHADER]

#define USE_COLOR0
#define USE_COLOR1
#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0
#define USE_TEXCOORD1
#define CUSTOM_INTERPOLATOR float3 LeafNormal : TEXCOORD2;
#define USE_MATERIAL_SUBSURFACE_COLOR

#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif

[VERTEXSHADER]

#include <Shaders/Common/GlobalConstants.h>

CONSTANT_BUFFER(ezMaterialConstants, 1)
{
  COLOR4F(VariationColor);
  COLOR4F(EmissiveColor);
  FLOAT1(MetallicValue);
  FLOAT1(ReflectanceValue);
  FLOAT1(RoughnessValue);
  FLOAT1(MaskThreshold);
  BOOL1(UseBaseTexture);
  BOOL1(UseMetallicTexture);
  BOOL1(UseNormalTexture);
  BOOL1(UseRoughnessTexture);
  BOOL1(UseEmissiveTexture);
  BOOL1(UseOcclusionTexture);
  
  INT1(KrautTreeMode);
  COLOR4F(SubsurfaceColor);
};

#include <Shaders/Materials/MaterialVertexShader.h>
#include "TreeShaderData.h"

float3 BendPosition(float3 position, float positionBend, float3 anchorPre, float3 anchorPost, float3 wind, float flutter)
{
  position -= anchorPre;
  float distToAnchor = length(position);

  position.x += wind.x * positionBend;
  position.y += wind.y * positionBend;
  position.z += flutter;

  return anchorPost + normalize(position) * distToAnchor;
}

float3 ComputeWind(float phasedTime, float3 localPosition, float4 vWindTrunk, float4 vWindBranches, float fBendAndFlutterStrength, float fBranchLevel, float fFlutterPhase, float3 vBendAnchorPre, float fBendAnchorStrength)
{
  // wind direction is always in local object space
  // but uses the global 0 - 20 m/sec speed range (w component and length) no matter the object scale

  float fFlutterAmplitude = 0.1; // expose ?
  
  float fFastFlutterWindSpeed = 15.0; // constant
  float fMinFlutterWindSpeed = 1.0; // constant (always have some flutter)
  float fMaxFlutterWindSpeed = 20.0; // constant
  float fFlutterPhaseShift = 1.9; // constant (sin(x) + sin(x*1.9) looks good)
  float fSlowFlutterSpeed = 1.0; // constant (blend between slow and fast)
  float fFastFlutterSpeed = 10.0; // constant

  float3 vBendAnchorPost = BendPosition(vBendAnchorPre, fBendAnchorStrength, float3(0, 0, 0), float3(0, 0, 0), vWindTrunk.xyz, 0);

  [branch]
  if (fBranchLevel == 0)
  {
    localPosition = BendPosition(localPosition, fBendAndFlutterStrength, vBendAnchorPre, vBendAnchorPost, vWindTrunk.xyz, 0);
  }
  else
  {
    float2 flutterSamplePos = float2(fFlutterPhase + phasedTime, (fFlutterPhase + phasedTime) * fFlutterPhaseShift);
    float flutterAmount = fFlutterAmplitude * fBendAndFlutterStrength * clamp(vWindBranches.w, fMinFlutterWindSpeed, fMaxFlutterWindSpeed);

    float2 flutterSlow = sin(flutterSamplePos * fSlowFlutterSpeed);
    float2 flutterFast = sin(flutterSamplePos * fFastFlutterSpeed);
    float2 flutter = lerp(flutterSlow, flutterFast, clamp(vWindBranches.w / fFastFlutterWindSpeed, 0, 1)) * flutterAmount;

    localPosition = BendPosition(localPosition, fBendAndFlutterStrength, vBendAnchorPre, vBendAnchorPost, vWindBranches.xyz, flutter.x + flutter.y);
  }

  return localPosition;
}

VS_OUT main(VS_IN Input)
{
  VS_OUT result = FillVertexData(Input);

  #if !MATERIAL_PREVIEW
  
  ezPerInstanceData data = GetInstanceData();
  float4x4 objectToWorld = TransformToMatrix(data.ObjectToWorld);
  float3 localPosition = Input.Position.xyz;

  float3 scale;
  scale.x = length(objectToWorld._m00_m10_m20);
  scale.y = length(objectToWorld._m01_m11_m21);
  scale.z = length(objectToWorld._m02_m12_m22);

  // shift time by world space position (x, y) to make trees standing next to each other flutter out of phase
  float phasedTime = WorldTime + objectToWorld._m03 + objectToWorld._m13;
  
  localPosition = ComputeWind(phasedTime, localPosition, data.Color, data.Color, Input.Color0.r, Input.Color0.g, Input.Color0.b, Input.Color1.xyz, Input.Color1.w);

  float4 worldPosition = mul(objectToWorld, float4(localPosition, 1));

  result.LeafNormal = float3(0, 0, 0);
  result.Color0 = Input.Color0;
  result.Color1 = Input.Color1;

  float globalUniformScale = dot(scale, 1.0 / 3.0);
  
  [branch]
  if (KrautTreeMode == 4) // Billboard Impostor
  {
    worldPosition.xyz += GetCameraDirRight() * result.TexCoord1.x * globalUniformScale;
    result.TexCoord1.x = 1.0;
    result.Normal = -GetCameraDirForwards();
    result.Normal.z = 0;
    result.Normal = normalize(result.Normal);
    result.Tangent = GetCameraDirRight();
    result.BiTangent = float3(0, 0, 1);

    float3 camDir = mul(-GetCameraDirForwards(), objectToWorld);
    float3 mainDirs[8] =
    {
      float3(0, +1, 0),
      float3(0.7071, 0.7071, 0),
      float3(+1, 0, 0),
      float3(0.7071, -0.7071, 0),
      float3(0, -1, 0),
      float3(-0.7071, -0.7071, 0),
      float3(-1, 0, 0),
      float3(-0.7071, +0.7071, 0)
    };

    int impostorFace = 0;
    float bestDist = dot(mainDirs[0], camDir);

    for (int i = 1; i < 8; ++i)
    {
      float dist = dot(mainDirs[i], camDir);

      if (dist > bestDist)
      {
        impostorFace = i;
        bestDist = dist;
      }
    }

    // flip the texture along X if necessary
    [flatten]
    if (impostorFace >= 4)
    {
      // for billboards this is eiter 0 or 0.25
      float xcoord = result.TexCoord0.x;

      result.TexCoord0.x -= xcoord * 2.0;
      // also flip the tangent to fix the lighting
      result.Tangent = -result.Tangent;
    }

    float impostorXoffset[8] = { 0.0, 0.25, 0.5, 0.75, 0.25, 0.5, 0.75, 1.0 };
    result.TexCoord0.x += impostorXoffset[impostorFace];

  }

  [branch]
  if (KrautTreeMode == 2) // Leaf
  {
    float2 span = result.TexCoord0.xy * 2.0 - 1.0;
    float size = result.TexCoord1.x * globalUniformScale;

    result.TexCoord1.x = 1.0;
    result.Normal = -GetCameraDirForwards();
    result.Normal.z = 0;
    result.Normal = normalize(result.Normal);
    result.Tangent = GetCameraDirRight();
    result.BiTangent = float3(0, 0, 1);

    worldPosition.xyz += span.x * GetCameraDirRight() * size;
    worldPosition.xyz += span.y * GetCameraDirUp() * size;
    
    result.LeafNormal = worldPosition.xyz - mul(objectToWorld, float4(LeafCenter, 1));

    [branch]
    if (LeafShadowOffset > 0.0)
    {
      float3 camDir = normalize(worldPosition.xyz - GetCameraPosition());

      worldPosition.xyz +=  camDir * size;
    }
  }

  result.WorldPosition = worldPosition;

  result.Position = mul(GetWorldToScreenMatrix(), worldPosition);

  #endif

  return result;
}

[GEOMETRYSHADER]

void CopyCustomInterpolators(GS_OUT output, VS_OUT input)
{
  output.LeafNormal = input.LeafNormal;
}

#include <Shaders/Materials/MaterialStereoGeometryShader.h>

[PIXELSHADER]

#define USE_SIMPLE_MATERIAL_MODEL
#define USE_MATERIAL_OCCLUSION
#define USE_TWO_SIDED_LIGHTING
#define USE_FOG

#include <Shaders/Common/GlobalConstants.h>

CONSTANT_BUFFER(ezMaterialConstants, 1)
{
  COLOR4F(VariationColor);
  COLOR4F(EmissiveColor);
  FLOAT1(MetallicValue);
  FLOAT1(ReflectanceValue);
  FLOAT1(RoughnessValue);
  FLOAT1(MaskThreshold);
  BOOL1(UseBaseTexture);
  BOOL1(UseMetallicTexture);
  BOOL1(UseNormalTexture);
  BOOL1(UseRoughnessTexture);
  BOOL1(UseEmissiveTexture);
  BOOL1(UseOcclusionTexture);
  
  INT1(KrautTreeMode);
  COLOR4F(SubsurfaceColor);
};

#include <Shaders/Materials/MaterialPixelShader.h>

Texture2D BaseTexture;
SamplerState BaseTexture_AutoSampler;

Texture2D NormalTexture;
SamplerState NormalTexture_AutoSampler;

Texture2D RoughnessTexture;
SamplerState RoughnessTexture_AutoSampler;

Texture2D OcclusionTexture;
SamplerState OcclusionTexture_AutoSampler;

float2 GetTexCoord()
{
  float2 tc = G.Input.TexCoord0.xy;

  #if !MATERIAL_PREVIEW
  
  // unfortunately we have to DIVIDE in the pixel shader with the original value
  // if we use the inverse of TexCoords.z and interpolate that in the vertex-shader
  // the result has a slightly different value in the pixel shader,
  // resulting in drastically reduced quality
  tc = tc / G.Input.TexCoord1.x;
  
  #endif

  tc.y = 1.0 - tc.y;

  return tc;
}

float3 GetBaseColor()
{
  #if MATERIAL_PREVIEW

    return BaseTexture.Sample(BaseTexture_AutoSampler, GetTexCoord()).rgb;
    
  #else

    float3 variationColor = VariationColor.rgb;
    float variationStrength = VariationColor.a;
    float vertexStrength = G.Input.Color0.a;

    float3 texColor = BaseTexture.Sample(BaseTexture_AutoSampler, GetTexCoord()).rgb;
    float3 finalColor = lerp(texColor, variationColor, vertexStrength * variationStrength);

    return finalColor;

  #endif
}

float3 GetNormal()
{
  float3 wsNormal;

  [branch]
  if (UseNormalTexture)
  {
    float3 normalTS = DecodeNormalTexture(NormalTexture.Sample(NormalTexture_AutoSampler, GetTexCoord()));

    // TODO: validate / preprocess: since we flip sampling the textures, the normal is also pointing in the other direction
    normalTS.y = -normalTS.y;

    wsNormal = TangentToWorldSpace(normalTS);
  }
  else
  {
    wsNormal = G.Input.Normal;
  }

  #if !MATERIAL_PREVIEW

    [branch]
    if (KrautTreeMode == 2) // Leaf
    {
      wsNormal += normalize(G.Input.LeafNormal);
    }

  #endif

  return normalize(wsNormal);
}

float GetMetallic()
{
  return 0;
}

float GetReflectance()
{
  return 0.2f;
}

float GetRoughness()
{
  [branch]
  if (UseRoughnessTexture)
  {
    return RoughnessValue * RoughnessTexture.Sample(RoughnessTexture_AutoSampler, GetTexCoord()).r;
  }
  else
  {
    return RoughnessValue;
  }
}

float GetOpacity()
{
  float opacity = BaseTexture.Sample(BaseTexture_AutoSampler, GetTexCoord()).a;

  #if BLEND_MODE == BLEND_MODE_MASKED
     return opacity - 0.5;
   #else
    return opacity;
  #endif
}

float GetOcclusion()
{
  float fBaseOcclusion = 1.0;

  #if !MATERIAL_PREVIEW

    return fBaseOcclusion = G.Input.TexCoord1.y;

  #endif


  [branch]
  if (UseOcclusionTexture)
  {
    return OcclusionTexture.Sample(OcclusionTexture_AutoSampler, G.Input.TexCoord0.xy).r * fBaseOcclusion;
  }
  else
  {
    return fBaseOcclusion;
  }
}

float3 GetSubsurfaceColor()
{
  return SubsurfaceColor.rgb;
}